---
import { storyblokEditable } from '@storyblok/astro';
import { useStoryblokApi } from '@storyblok/astro';
import { getLangFromUrl, useTranslatedPath } from '../../scripts/utils';

const lang = getLangFromUrl(Astro.url);

const storyblokApi = useStoryblokApi();

let storiesData = [];

const { blok } = Astro.props;

if (!blok.Cases || blok.Cases.length === 0) {
  const { data } = await storyblokApi.get('cdn/stories', {
    version: process.env.PUBLIC_ENV !== 'production' ? 'draft' : 'published',
    content_type: 'work',
    language: lang,
  });
  storiesData = data.stories;
} else {
  storiesData = blok.Cases;
}

// Extract tags from all entries before mapping them into 'posts'
const allTags = [];

storiesData.forEach(entry => {
  const tags = entry.tag_list || []; // Use 'tag_list' to access tags
  tags.forEach(tag => {
    if (!allTags.includes(tag)) {
      allTags.push(tag);
    }
  });
});

const posts = storiesData.map(story => {
  return {
    title: story.content.title,
    description: story.content.description.replace(/\[(.*?)\]/g, '<u>$1</u>'),
    Landscape: story.content.Landscape,
    Portrait: story.content.Portrait,
    slug: story.full_slug,
    tags: story.tag_list, 
  };
});



---



<div {...storyblokEditable(blok)} class="">

  <!-- Display the list of tags for filtering -->
  {blok.Columns < 3 ? (

    <div class=" bottom-4 fixed w-full mx-auto justify-center flex px-[30px] w-100 hidden">
      
        <div id="tagFilter" class="rounded-[20px] bg-black inline-flex p-[4px] gap-1">
          
          <div class="cat px-[19px] py-[17px] leading-none rounded-[16px] bg-darkGrey text-black ">
              <span class="text-[16px] weight-450 leading-none ">Filters</span>
          </div>
  
          <div class="rounded-[16px] bg-beige p-[4px] inline-flex gap-1 bg-opacity-25">
            {allTags.map(tag => (
              <div class="cat">
                <label class="group/item block">
                    <input type="checkbox "  class="peer absolute hidden" value={tag} key={tag}/>
                    <span class="transition block text-[16px] text-white leading-none rounded-[16px] px-[19px] py-[17px] bg-black text-opacity-50 border border-transparent group-hover/item:text-opacity-100 peer-checked:text-green hover:border-darkGrey peer-checked:border-green">{tag}</span>
                </label>
              </div>
            ))}
          </div>
  
        </div>
  
    </div>

    ) : null}


    <div class="mx-auto px-[30px] my-28">

        <div class="grid grid-cols-2 mb-6 items-end">
          <div class="flex-1">
            <h2 class="animate text-lg text-black font-medium">{blok.Title}</h2>
          </div>
          { blok.Columns == 3 ? (
          <div class="flex-1 flex justify-end	">
            <a href="" class="button hollow self-end"><span>Bekijk meer</span></a>
          </div>
          ) : (
            null
          )}
        </div>

        <ul class={`grid grid-cols-${blok.Columns} gap-5`}>
          {posts.map(post => (
            <li class="flex-1">
              <a href={`/${post.slug}`} class={`group scale-50 py-20 bg-${blok.background}`}>
                
                { blok.Columns == 3 ? (
                  <div>

                    <div class="relative rounded-lg overflow-hidden hover-target" >
                      
                      { post.Portrait.filename && post.Portrait.filename.toLowerCase().includes('.mp4') ? (
                        
                        <video width="320" height="240" autoplay playsinline muted loop class="w-full rounded-lg aspect-[45/66] group-hover:scale-105 object-cover transition-all duration-[450ms] ease-[cubic-bezier(0.95,0.05,0.795,0.035)]">
                          <source src={post.Portrait.filename} type="video/mp4"/>
                        </video>
                      ) : (
                        <img src={`${post.Portrait.filename}/m/1200x0/smart`} lazy="true" class="rounded-lg aspect-[450/660] object-cover group-hover:scale-105 transition-all duration-[450ms] ease-[cubic-bezier(0.95,0.05,0.795,0.035)]" />
                      )}

                    </div>
                    
                    <div class="flex mt-4">
                      <div class="grow-0">
                        <div class="relative w-[10px] h-auto group-hover:w-16 group-hover:m-0 transition-all duration-[450ms] aspect-square m-3 rounded-lg overflow-hidden ease-[cubic-bezier(0.95,0.05,0.795,0.035)]">
                          <div class="bg-black absolute top-0 left-0 w-full h-full group-hover:opacity-0 transition-all duration-[450ms] ease-[cubic-bezier(0.95,0.05,0.795,0.035)]"></div>
                          <img class="w-full h-full object-cover" src="https://placebear.com/100/100" alt="" class="rounded-lg"/>
                        </div>
                      </div>
                      <h3 class="animate text-md group-hover:ml-3 transition-all duration-[450ms] max-w-[calc(100%-75px)] ease-[cubic-bezier(0.95,0.05,0.795,0.035)]" set:html={post.description}></h3> 
                    </div>
                  </div>
                ) : (
                  <div class="group mb-12">
                    <h3 class=" animate text-md mb-4 relative overflow-hidden h-[33px]">
                      <span class="group-hover:-translate-y-8 block transition-slow h-[33px] overflow-hidden"  set:html={post.description} ></span>
                      <span class="absolute top-8 left-0 transition-slow group-hover:top-0" set:html={post.description} ></span>
                    </h3>
                    
                    <div class="overflow-hidden rounded-lg">
                    { post.Landscape.filename && post.Landscape.filename.toLowerCase().includes('.mp4') ? (
                        
                        <video width="320" height="240" autoplay playsinline muted loop class="w-full  aspect-[12/9] group-hover:scale-105 object-cover transition-all duration-[450ms] ease-[cubic-bezier(0.95,0.05,0.795,0.035)]">
                          <source src={post.Landscape.filename} type="video/mp4"/>
                        </video>
                      ) : (
                        <img src={`${post.Landscape.filename}/m/1200x660/smart`} lazy="true" class="rounded-lg aspect-[12/9] w-full object-cover mb-8 hover-target" />
                      )}
                      </div>
                  </div>
                )}
              </a>
            </li>
          ))}
        </ul>
        
    </div>

</div>

<script>

// import { gsap } from "gsap";

// document.addEventListener('DOMContentLoaded', function() {

// const customCursor = document.getElementById('custom-cursor');

// window.addEventListener('load', function(e) {
  
//   const customCursor = document.getElementById('custom-cursor');
  
//   gsap.set(customCursor, {
//       x: e.clientX,
//       y: e.clientY,
//       opacity: 0
//     });
//   });


//   document.querySelectorAll('.hover-target').forEach(el => {

//     document.addEventListener('mousemove', (e) => {
//       gsap.set(customCursor, {
//         x: e.clientX,
//         y: e.clientY,
//         duration: 0.3,
//         ease: 'power2.out'
//       });
//     });

//     el.addEventListener('mouseenter', () => {
//       gsap.to(customCursor, {
//         scale: 1,
//         duration: 0.3,
//         ease: 'power2.out',
//         opacity: 100,
//         overwrite: true
//       });
//     });

//     el.addEventListener('mouseleave', () => {
//       gsap.to(customCursor, {
//         scale: 0.1, 
//         duration: 0.3,
//         ease: 'power2.out',
//         opacity: 0,
//         overwrite: true
//       });
//     });
//   });
//   });

</script>
