---

import { storyblokEditable } from '@storyblok/astro'
import SliderMarqueeItem from '../../includes/SliderMarqueeItem.astro'

const { blok } = Astro.props

---

<div {...storyblokEditable(blok)} class="my-36">

    <div class="mx-auto px-[30px] text-center mb-24">
        <h1 class="animate text-h4 max-w-[770px] font-medium text-center inline-block">
            {blok.Title}
        </h1>
    </div>

    <div class="mx-auto relative">
       
      <swiper-container class="swiper-container mb-16" id="swiper-container"  keyboard="true" slides-per-view="auto" speed="1000" centered-slides="true" free-mode="true" navigation="true" space-between="300" loop="false" init="false">
        {blok.Cards && blok.Cards.length > 0 && blok.Cards.map((Card, index) => (
          <swiper-slide class="w-[680px] h-100 bg-white rounded-xl px-[60px] py-[60px]" lazy="false" key={index}>
              <div class="uppercase text-sm mb-6">{Card.Title}</div>
              <p class="text-md">{Card.Text}</p>
              <div class="flex justify-center">
                <a class="button black absolute self-center -bottom-[30px]" href={Card.Button.cached_url}>
                  <span>{Card.Button.title}</span>
                </a>
              </div>
          </swiper-slide>
          ))}
      </swiper-container>

      <div class="slider-marquee flex w-full flex-nowrap h-100 gap-20 leading-none mb-20 absolute top-1/2 -translate-y-1/2">

        <span>
          <SliderMarqueeItem>
        </span>
        <span>
          <SliderMarqueeItem>
        </span>
       
      </div>
        
    </div>

    <div class="mx-auto px-[30px] relative">

      <div class="grid grid-cols-2 gap-4">
        <div class="">
          <div class="flex border-2 border-darkGrey px-[15px] rounded h-[40px] inline-flex items-center justify-center">
            <div class="custom-pagination block"></div>
          </div>
        </div>
        <div class="justify-self-end">
          <div class="flex flex-1 gap-4">
            <!-- Custom Previous Button -->
            <div class="swiper-button-prev-custom bg-black group/swiperButton hover:bg-green text-white inline-flex w-[40px] aspect-square flex items-center justify-center rounded ">
              <svg width="30" height="30" viewBox="0 0 30 30" fill="none">
                <path class="group-hover/swiperButton:stroke-black" d="M19 7L11 15L19 23" stroke="white" stroke-width="2"/>
              </svg>
            </div>
            <!-- Custom Next Button -->
            <div class="swiper-button-next-custom bg-black group/swiperButton hover:bg-green text-white inline-flex w-[40px] aspect-square flex items-center justify-center rounded">
              <svg width="30" height="30" viewBox="0 0 30 30" fill="none">
                <path class="group-hover/swiperButton:stroke-black" d="M11 23L19 15L11 7" stroke="white" stroke-width="2"/>
              </svg>
            </div>
          </div>
        </div>
      </div>

      
      
    </div>

    

</div> 


    
<script>
   import { register } from 'swiper/element/bundle';
    register();

    const swiperEl = document.querySelector('swiper-container');

    if(swiperEl){
 
        const params = {
          injectStyles: [
          `
          .swiper {
              overflow: visible !important;
              clip-path: inset(-100vw -100vw -100vw -17px); 
          }
          `,
          ],
          navigation: {
            nextEl: '.swiper-button-next-custom',
            prevEl: '.swiper-button-prev-custom',
          },
          pagination: {
            el: '.custom-pagination',
            type: 'custom',
            renderCustom: function (swiper, current, total) {
                return current + ' - ' + (total - 0); 
            }
          }

        };

        Object.assign(swiperEl, params);

        swiperEl.initialize();

    }
</script>

<script>

  import { gsap } from "gsap";
  import { horizontalLoop } from "../../scripts/marquee"


  const marqueeContainers = gsap.utils.toArray(".slider-marquee");
  marqueeContainers.forEach(container => {
      const boxes = gsap.utils.toArray(container.querySelectorAll("span"));
      const loop = horizontalLoop(boxes, { repeat: -1 });
  });


</script>











